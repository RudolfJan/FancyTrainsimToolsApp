<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:converters="clr-namespace:Styles.Library.Converters">

	<!--  Converter for enums to radiobutton  -->
	<converters:EnumToBooleanConverter x:Key="EnumBooleanConverter" />
  <converters:BooleanToColorConverter x:Key="BooleanToColorConverter" />

  <!--  :x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">  -->

	<!--  https://stackoverflow.com/questions/6745663/how-to-create-make-rounded-corner-buttons-in-wpf  -->

	<!--  Standard button layout  -->

    <Style x:Key="DefaultButton" TargetType="{x:Type Button}">
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Margin" Value="{DynamicResource DefaultMargin}" />
		<Setter Property="Width" Value="{DynamicResource DefaultButtonWidth}" />
		<Setter Property="Height" Value="{DynamicResource ItemHeight}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="grid">
						<Border
							x:Name="border"
							Background="{DynamicResource ButtonBackground}"
							BorderBrush="{DynamicResource LabelText}"
							Padding="{DynamicResource DefaultPadding}"
							BorderThickness="{DynamicResource ThinBorderWidth}"
							CornerRadius="{DynamicResource DefaultCorners}">
							<ContentPresenter
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								TextElement.FontWeight="Bold" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressed}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonDisabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="WideButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Width" Value="{DynamicResource WideButtonWidth}" />
		<Setter Property="Margin" Value="{DynamicResource SmallMargin}"/>
	<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="grid">
						<Border
							x:Name="border"
							Height="{DynamicResource ItemHeight}"
							Background="{DynamicResource ButtonBackground}"
							BorderBrush="{DynamicResource LabelText}"
							Padding="{DynamicResource DefaultPadding}"
							BorderThickness="{DynamicResource ThinBorderWidth}"
							CornerRadius="{DynamicResource DefaultCorners}">
							<ContentPresenter
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								TextElement.FontWeight="Bold" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressed}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonDisabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ImageButton" TargetType="{x:Type Button}">
		<Setter Property="Width" Value="{DynamicResource ImageButtonWidth}" />
		<Setter Property="Height" Value="{DynamicResource ImageButtonHeight}" />
		<Setter Property="Margin" Value="{DynamicResource SmallMargin}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="grid">
						<Border
							x:Name="border"
							Background="{DynamicResource ButtonBackground}"
							BorderBrush="{DynamicResource LabelText}"
							Padding="{DynamicResource DefaultPadding}"
							BorderThickness="{DynamicResource ThinBorderWidth}"
							CornerRadius="{DynamicResource DefaultCorners}">
							<ContentPresenter
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								TextElement.FontWeight="Bold" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressed}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonDisabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="ThumbNailButton" TargetType="{x:Type Button}">
		<Setter Property="Width" Value="{DynamicResource ImageButtonWidth}" />
		<Setter Property="Height" Value="{DynamicResource ImageButtonHeight}" />
		<Setter Property="Margin" Value="0,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="grid">
						<Border
							x:Name="border"
							Background="{DynamicResource ButtonBackground}"
							BorderBrush="{DynamicResource LabelText}"
							Padding="0"
							BorderThickness="{DynamicResource ThinBorderWidth}"
							CornerRadius="0">
							<ContentPresenter
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								TextElement.FontWeight="Bold" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressed}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonDisabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

  <!--  slow button layout  -->
  <Style x:Key="SlowButton" TargetType="{x:Type Button}">
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="IsDefault" Value="True" />
    <Setter Property="Margin" Value="{DynamicResource DefaultMargin}" />
    <Setter Property="Padding" Value="{DynamicResource DefaultPadding}" />
    <Setter Property="Width" Value="{DynamicResource DefaultButtonWidth}" />
    <Setter Property="Height" Value="{DynamicResource ItemHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid x:Name="grid">
            <Border
              x:Name="border"
              Height="{DynamicResource ItemHeight}"
              Background="{DynamicResource SlowButtonBackground}"
              BorderBrush="{DynamicResource LabelText}"
              Padding="{DynamicResource DefaultPadding}"
              BorderThickness="{DynamicResource ThinBorderWidth}"
              CornerRadius="{DynamicResource DefaultCorners}">
              <ContentPresenter
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                TextElement.FontWeight="Bold" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource SlowButtonPressed}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHover}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  OK button layout  -->
	<Style x:Key="OKButton" TargetType="{x:Type Button}">
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="IsDefault" Value="True" />
		<Setter Property="Margin" Value="{DynamicResource DefaultMargin}" />
		<Setter Property="Padding" Value="{DynamicResource DefaultPadding}" />
		<Setter Property="Width" Value="{DynamicResource DefaultButtonWidth}" />
		<Setter Property="Height" Value="{DynamicResource ItemHeight}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="grid">
						<Border
							x:Name="border"
							Height="{DynamicResource ItemHeight}"
							Background="{DynamicResource OKButtonBackground}"
							BorderBrush="{DynamicResource LabelText}"
							Padding="{DynamicResource DefaultPadding}"
							BorderThickness="{DynamicResource ThinBorderWidth}"
							CornerRadius="{DynamicResource DefaultCorners}">
							<ContentPresenter
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								TextElement.FontWeight="Bold" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressed}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonDisabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Big OK button layout  -->
	<Style x:Key="BigOKButton" TargetType="{x:Type Button}">
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="IsDefault" Value="True" />
		<Setter Property="Margin" Value="{DynamicResource DefaultMargin}" />
		<Setter Property="Padding" Value="{DynamicResource DefaultPadding}" />
		<Setter Property="Width" Value="{DynamicResource DefaultButtonWidth}" />
		<Setter Property="Height" Value="{DynamicResource BigButtonHeight}" />
		<Setter Property="Template">

			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="grid">
						<Border
							x:Name="border"
							Height="{DynamicResource BigButtonHeight}"
							Background="{DynamicResource OKButtonBackground}"
							BorderBrush="{DynamicResource LabelText}"
							Padding="{DynamicResource DefaultPadding}"
							BorderThickness="{DynamicResource ThinBorderWidth}"
							CornerRadius="{DynamicResource DefaultCorners}">
							<ContentPresenter
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								TextElement.FontSize="12"
								TextElement.FontWeight="Bold" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressed}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonDisabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  Cancel button layout  -->
	<Style x:Key="CancelButton" TargetType="{x:Type Button}">
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="IsCancel" Value="True" />
		<Setter Property="Margin" Value="{DynamicResource DefaultMargin}" />
		<Setter Property="Padding" Value="{DynamicResource DefaultPadding}" />
		<Setter Property="Width" Value="{DynamicResource DefaultButtonWidth}" />
		<Setter Property="Height" Value="{DynamicResource ItemHeight}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="grid">
						<Border
							x:Name="border"
							Height="{DynamicResource ItemHeight}"
							Background="{DynamicResource CancelButtonBackground}"
							BorderBrush="{DynamicResource LabelText}"
							Padding="{DynamicResource DefaultPadding}"
							BorderThickness="{DynamicResource ThinBorderWidth}"
							CornerRadius="{DynamicResource DefaultCorners}">
							<ContentPresenter
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								TextElement.FontWeight="Bold" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressed}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonDisabled}" />
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  Button layout for opening file dialogs  -->
	<Style x:Key="DottedButton" TargetType="{x:Type Button}">
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Top" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Width" Value="{DynamicResource DottedButtonWidth}" />
		<Setter Property="Height" Value="{DynamicResource ItemHeight}" />
		<Setter Property="Content" Value="..."/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="grid">
						<Border
							x:Name="border"
							Background="{DynamicResource ButtonBackground}"
							BorderBrush="{DynamicResource LabelText}"
							Padding="{DynamicResource SmallPadding}"
							BorderThickness="{DynamicResource ThinBorderWidth}"
							CornerRadius="{DynamicResource DefaultCorners}">
							<ContentPresenter
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								TextElement.FontSize="30"
								TextElement.FontWeight="ExtraBold" 
								Content="..."/>
						</Border>

					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressed}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonDisabled}" />
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/checkbox-styles-and-templates  -->
	<!--  Control colors.  -->
	<Color x:Key="WindowColor">#FFE8EDF9</Color>
	<Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
	<Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

	<Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
	<Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
	<Color x:Key="DisabledForegroundColor">#FF888888</Color>

	<Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
	<Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

	<Color x:Key="ControlLightColor">White</Color>
	<Color x:Key="ControlMediumColor">#FF7381F9</Color>
	<Color x:Key="ControlDarkColor">#FF211AA9</Color>

	<Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
	<Color x:Key="ControlPressedColor">#FF211AA9</Color>


	<Color x:Key="GlyphColor">#FF444444</Color>
	<Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

	<!--  Border colors  -->
	<Color x:Key="BorderLightColor">#FFCCCCCC</Color>
	<Color x:Key="BorderMediumColor">#FF888888</Color>
	<Color x:Key="BorderDarkColor">#FF444444</Color>

	<Color x:Key="PressedBorderLightColor">#FF888888</Color>
	<Color x:Key="PressedBorderDarkColor">#FF444444</Color>

	<Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
	<Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

	<Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

	<!--  Control-specific resources.  -->
	<Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
	<Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
	<Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

	<Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

	<LinearGradientBrush x:Key="MenuPopupBrush" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" />
		<GradientStop Offset="0.5" Color="{DynamicResource ControlMediumColor}" />
		<GradientStop Offset="1" Color="{DynamicResource ControlLightColor}" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" StartPoint="0,0" EndPoint="1,0">
		<LinearGradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Offset="0" Color="#000000FF" />
				<GradientStop Offset="0.4" Color="#600000FF" />
				<GradientStop Offset="0.6" Color="#600000FF" />
				<GradientStop Offset="1" Color="#000000FF" />
			</GradientStopCollection>
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
		<Setter Property="Margin" Value="{DynamicResource DefaultMargin}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">

					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Border
								x:Name="Border"
								Width="20"
								Height="20"
								BorderThickness="1"
								CornerRadius="3">
								<Border.BorderBrush>
									<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
										<LinearGradientBrush.GradientStops>
											<GradientStopCollection>
												<GradientStop Offset="0.0" Color="{DynamicResource BorderLightColor}" />
												<GradientStop Offset="1.0" Color="{DynamicResource BorderDarkColor}" />
											</GradientStopCollection>
										</LinearGradientBrush.GradientStops>
									</LinearGradientBrush>
								</Border.BorderBrush>
								<Border.Background>
									<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
										<LinearGradientBrush.GradientStops>
											<GradientStopCollection>
												<GradientStop Color="{DynamicResource ControlLightColor}" />
												<GradientStop Offset="1.0" Color="{DynamicResource ControlMediumColor}" />
											</GradientStopCollection>
										</LinearGradientBrush.GradientStops>
									</LinearGradientBrush>

								</Border.Background>
								<Grid>
									<Path
										x:Name="CheckMark"
										Width="7"
										Height="7"
										Data="M 0 0 L 7 7 M 0 7 L 7 0"
										SnapsToDevicePixels="False"
										StrokeThickness="2"
										Visibility="Collapsed">
										<Path.Stroke>
											<SolidColorBrush Color="{DynamicResource GlyphColor}" />
										</Path.Stroke>
									</Path>
									<Path
										x:Name="InderminateMark"
										Width="7"
										Height="7"
										Data="M 0 7 L 7 0"
										SnapsToDevicePixels="False"
										StrokeThickness="2"
										Visibility="Collapsed">
										<Path.Stroke>
											<SolidColorBrush Color="{DynamicResource GlyphColor}" />
										</Path.Stroke>
									</Path>
								</Grid>
							</Border>
						</BulletDecorator.Bullet>
						<ContentPresenter
							Margin="4,0,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
										                              Storyboard.TargetProperty="(Panel.Background).                       (GradientBrush.GradientStops)[1].(GradientStop.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource ControlMouseOverColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
										                              Storyboard.TargetProperty="(Panel.Background).                       (GradientBrush.GradientStops)[1].(GradientStop.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource ControlPressedColor}" />
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
										                              Storyboard.TargetProperty="(Border.BorderBrush).                       (GradientBrush.GradientStops)[0].(GradientStop.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource PressedBorderDarkColor}" />
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
										                              Storyboard.TargetProperty="(Border.BorderBrush).                       (GradientBrush.GradientStops)[1].(GradientStop.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource PressedBorderLightColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark"
										                               Storyboard.TargetProperty="(UIElement.Visibility)">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked" />
								<VisualState x:Name="Indeterminate">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="InderminateMark"
										                               Storyboard.TargetProperty="(UIElement.Visibility)">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</BulletDecorator>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- https://stackoverflow.com/questions/1532125/different-images-for-enable-and-disable-states-of-a-button-in-wpf -->

</ResourceDictionary>